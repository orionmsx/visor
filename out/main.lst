Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2025.03.13 - 18:30:36]

/Users/rafaellopezverdejo/Documents/proyectosMSX/asm/visor/src/main.asm
Errors: 0

       1   00:0000                      ;*********************************************************************
       2   00:0000                      ;*
       3   00:0000                      ;* Visor de pantallas
       4   00:0000                      ;*
       5   00:0000                      ;* Fecha: 09/03/2025
       6   00:0000                      ;* Autor: Rafael López "Orion"
       7   00:0000                      ;* Email: orion@orionmsx.com
       8   00:0000                      ;*
       9   00:0000                      ;*********************************************************************
      10   00:0000                      
      11   00:0000                      	output "out/main.bin"
      12   00:8200                      
      13   00:8200                          include "constantes.asm"
       1.  00:8200                      ;****************
       2.  00:8200                      ; SERVICIOS BIOS
       3.  00:8200                      ;****************
       4.  00:8200                      
       5.  00:8200  (00:00D5)           GTSTCK  equ	#00D5	;lee los cursores y joystick
       6.  00:8200  (00:013E)           RDVDP	equ	#013E	;lee registro del VDP
       7.  00:8200  (00:0047)           WRTVDP 	equ #0047	;escribe registro del VDP
       8.  00:8200  (00:0053)           SETWRT  equ #0053   ;habilita el VDP para escribir
       9.  00:8200  (00:004D)           WRTVRM	equ	#004D	;escribe en VRAM
      10.  00:8200                      
      11.  00:8200                      
      12.  00:8200                      ;*************************
      13.  00:8200                      ; DIRECCIONES IMPORTANTES
      14.  00:8200                      ;*************************
      15.  00:8200                      
      16.  00:8200  (00:FD9F)           HTIMI	equ #FD9F   ;dirección de la ISR original del sistema para el VDP
      17.  00:8200                      
      18.  00:8200                      
      19.  00:8200                      ;*************
      20.  00:8200                      ; ESPECIFICAS
      21.  00:8200                      ;*************
      22.  00:8200                      
      23.  00:8200  (00:0005)           ANCHO_MAPA  equ 5
      24.  00:8200  (00:0002)           ALTO_MAPA   equ 2
      25.  00:8200  (00:0006)           byte_6      equ 6   ;para preparar el VDP para una escritura
      14   00:8200                      
      15   00:8200                      ;**************
      16   00:8200                      ; CABECERA BIN
      17   00:8200                      ;**************
      18   00:8200                      
      19   00:8200  FE                  	db #fe
      20   00:8201  00 82               	dw BEGIN
      21   00:8203  21 88               	dw END
      22   00:8205  00 82               	dw BEGIN
      23   00:8207                      
      24   00:8207                      	org #8200
      25   00:8200                      
      26   00:8200                      ;*********************
      27   00:8200                      ; INICIO DEL PROGRAMA
      28   00:8200                      ;*********************
      29   00:8200                      
      30   00:8200                      BEGIN:
      31   00:8200                      
      32   00:8200  F3                      di
      33   00:8201                      
      34   00:8201                          ;Engancha nuestra custom ISR
      35   00:8201  ED 56                   im 1
      36   00:8203  3E C3                   ld a,0C3h                               ;código de la instrucción JP
      37   00:8205  32 9F FD                ld (HTIMI),a
      38   00:8208  21 60 82                ld hl,tickMain
      39   00:820B  22 A0 FD                ld (HTIMI+1),hl
      40   00:820E                          
      41   00:820E                          ;bloquea la lógica del programa para inicializar hardware
      42   00:820E  3E 01                   ld a,1
      43   00:8210  32 1E 88                ld (tickInProgress),a
      44   00:8213                      
      45   00:8213  CD 4E 83                call SetVideoMode
      46   00:8216                      
      47   00:8216  21 D6 86                ld hl,tabla_colores
      48   00:8219  11 00 00                ld de,#0000 
      49   00:821C  CD F6 85                call depack_VRAM
      50   00:821F  21 D6 86                ld hl,tabla_colores
      51   00:8222  11 00 08                ld de,#0800 
      52   00:8225  CD F6 85                call depack_VRAM
      53   00:8228  21 D6 86                ld hl,tabla_colores
      54   00:822B  11 00 10                ld de,#1000 
      55   00:822E  CD F6 85                call depack_VRAM
      56   00:8231                      
      57   00:8231  21 55 87                ld hl,tabla_tiles
      58   00:8234  11 00 20                ld de,#2000 
      59   00:8237  CD F6 85                call depack_VRAM
      60   00:823A  21 55 87                ld hl,tabla_tiles
      61   00:823D  11 00 28                ld de,#2800 
      62   00:8240  CD F6 85                call depack_VRAM
      63   00:8243  21 55 87                ld hl,tabla_tiles
      64   00:8246  11 00 30                ld de,#3000 
      65   00:8249  CD F6 85                call depack_VRAM
      66   00:824C                      
      67   00:824C  AF                      xor a
      68   00:824D  21 1B 88                ld hl,x_mapa
      69   00:8250  77                      ld (hl),a
      70   00:8251  23                      inc hl
      71   00:8252  77                      ld (hl),a
      72   00:8253                      
      73   00:8253  CD E5 82                call pinta_pantalla
      74   00:8256                      
      75   00:8256                          ;desbloquea la lógica del programa tras inicializar hardware
      76   00:8256  AF                      xor a
      77   00:8257  32 1E 88                ld (tickInProgress),a
      78   00:825A  CD 3E 01                call RDVDP
      79   00:825D                      
      80   00:825D  FB                      ei
      81   00:825E                      
      82   00:825E                      bucle_infinito:
      83   00:825E  18 FE                   jr $
      84   00:8260                      
      85   00:8260                          include "isr.asm"
       1.  00:8260                      tickMain:
       2.  00:8260  F3                      di
       3.  00:8261  CD 3E 01                call RDVDP                      ;borra flag de interrupción
       4.  00:8264  21 1E 88                ld hl,tickInProgress            ;si hay una ISR anterior sin terminar no ejecuta la lógica del juego
       5.  00:8267  CB 46                   bit 0,(hl)
       6.  00:8269  20 33                   jr nz,tickMain2
       7.  00:826B  34                      inc (hl)                        ;pone la marca de ISR trabajando
       8.  00:826C  FB                      ei
       9.  00:826D                      
      10.  00:826D  21 1F 88                ld hl,timer                     ;incrementa el contador global del programa
      11.  00:8270  34                      inc (hl)
      12.  00:8271                      
      13.  00:8271  3A 20 88                ld a,(enCortinilla)
      14.  00:8274  B7                      or a
      15.  00:8275  28 0B                   jr z,.seguimos
      16.  00:8277                      
      17.  00:8277  CD 71 83                call drawCortinilla
      18.  00:827A  21 1D 88                ld hl,waitCounter
      19.  00:827D  FA 82 82                jp m,.seguimos
      20.  00:8280  18 18                   jr .terminamos
      21.  00:8282                      
      22.  00:8282                      .seguimos:
      23.  00:8282                      
      24.  00:8282  AF                      xor a
      25.  00:8283  CD D5 00            	call GTSTCK
      26.  00:8286                      
      27.  00:8286  FE 01                   cp 1
      28.  00:8288  CC A3 82                call z,do_arriba
      29.  00:828B  FE 03               	cp 3
      30.  00:828D  CC C4 82            	call z,do_derecha
      31.  00:8290  FE 05                   cp 5
      32.  00:8292  CC B3 82                call z,do_abajo
      33.  00:8295  FE 07               	cp 7
      34.  00:8297  CC D5 82            	call z,do_izquierda
      35.  00:829A                      
      36.  00:829A                      .terminamos:
      37.  00:829A  AF                      xor a                           ;quita la marca de ISR trabajando
      38.  00:829B  32 1E 88                ld (tickInProgress),a
      39.  00:829E                      
      40.  00:829E                      tickMain2:
      41.  00:829E  CD 3E 01                call RDVDP                      ;lee y borra el flag de interrupción
      42.  00:82A1  B7                      or a
      43.  00:82A2                      
      44.  00:82A2  C9                      ret
      86   00:82A3                          include "rutinas.asm"
       1.  00:82A3                      do_arriba:
       2.  00:82A3  F5                      push af
       3.  00:82A4  3A 1C 88                ld a,(y_mapa)
       4.  00:82A7  B7                      or a
       5.  00:82A8  28 07                   jr z,.end
       6.  00:82AA  3D                      dec a
       7.  00:82AB  32 1C 88                ld (y_mapa),a
       8.  00:82AE  CD 67 83                call doCortinilla
       9.  00:82B1                      .end:
      10.  00:82B1  F1                      pop af
      11.  00:82B2  C9                      ret
      12.  00:82B3                      
      13.  00:82B3                      do_abajo:
      14.  00:82B3  F5                      push af
      15.  00:82B4  3A 1C 88                ld a,(y_mapa)
      16.  00:82B7  FE 01                   cp (ALTO_MAPA-1)
      17.  00:82B9  28 07                   jr z,.end
      18.  00:82BB  3C                      inc a
      19.  00:82BC  32 1C 88                ld (y_mapa),a
      20.  00:82BF  CD 67 83                call doCortinilla
      21.  00:82C2                      .end:
      22.  00:82C2  F1                      pop af
      23.  00:82C3  C9                      ret
      24.  00:82C4                      
      25.  00:82C4                      
      26.  00:82C4                      do_derecha:
      27.  00:82C4  F5                      push af
      28.  00:82C5  3A 1B 88                ld a,(x_mapa)
      29.  00:82C8  FE 04                   cp (ANCHO_MAPA-1)
      30.  00:82CA  28 07                   jr z,.end
      31.  00:82CC  3C                      inc a
      32.  00:82CD  32 1B 88                ld (x_mapa),a
      33.  00:82D0  CD 67 83                call doCortinilla
      34.  00:82D3                      .end:
      35.  00:82D3  F1                      pop af
      36.  00:82D4  C9                      ret
      37.  00:82D5                      
      38.  00:82D5                      
      39.  00:82D5                      do_izquierda:
      40.  00:82D5  F5                      push af
      41.  00:82D6  3A 1B 88                ld a,(x_mapa)
      42.  00:82D9  B7                      or a
      43.  00:82DA  28 07                   jr z,.end
      44.  00:82DC  3D                      dec a
      45.  00:82DD  32 1B 88                ld (x_mapa),a
      46.  00:82E0  CD 67 83                call doCortinilla
      47.  00:82E3                      .end:
      48.  00:82E3  F1                      pop af
      49.  00:82E4  C9                      ret
      50.  00:82E5                      
      51.  00:82E5                      
      52.  00:82E5                      pinta_pantalla:
      53.  00:82E5  CD 3E 83                call apaga_pantalla
      54.  00:82E8  CD FD 82                call calcula_puntero
      55.  00:82EB  87                      add a,a
      56.  00:82EC  21 96 83                ld hl,pantallas
      57.  00:82EF  CD 0D 83                call getIndexHL_A
      58.  00:82F2  11 00 38                ld de,#3800
      59.  00:82F5  76                      halt
      60.  00:82F6  CD F6 85                call depack_VRAM
      61.  00:82F9  CD 46 83                call enciende_pantalla
      62.  00:82FC  C9                      ret
      63.  00:82FD                      
      64.  00:82FD                      
      65.  00:82FD                      calcula_puntero:
      66.  00:82FD  3A 1C 88                ld a,(y_mapa)
      67.  00:8300  47                      ld b,a
      68.  00:8301  AF                      xor a
      69.  00:8302  80 80 80 80 80      [ANCHO_MAPA]    add b
      70.  00:8307  47                      ld b,a
      71.  00:8308  3A 1B 88                ld a,(x_mapa)
      72.  00:830B  80                      add a,b
      73.  00:830C  C9                      ret
      74.  00:830D                      
      75.  00:830D                      
      76.  00:830D                      ;*********************************************************************************************************
      77.  00:830D                      ;*
      78.  00:830D                      ;* Obtiene el valor de la posición de memoria apuntada por HL + A
      79.  00:830D                      ;*
      80.  00:830D                      ;* Parámetros: HL = index pointer, A = index
      81.  00:830D                      ;*
      82.  00:830D                      ;* Devuelve: HL = (HL + A)
      83.  00:830D                      ;*
      84.  00:830D                      ;* Modifica: Nada
      85.  00:830D                      ;*
      86.  00:830D                      ;*********************************************************************************************************
      87.  00:830D                      getIndexHL_A:
      88.  00:830D  CD 15 83                call ADD_A_HL
      89.  00:8310  7E                      ld a,(hl)
      90.  00:8311  23                      inc hl
      91.  00:8312  66                      ld h,(hl)
      92.  00:8313  6F                      ld l,a
      93.  00:8314  C9                      ret
      94.  00:8315                      
      95.  00:8315                      
      96.  00:8315                      ;*********************************************************************************************************
      97.  00:8315                      ;*
      98.  00:8315                      ;* Suma HL y A
      99.  00:8315                      ;*
     100.  00:8315                      ;* Parámetros: A, HL
     101.  00:8315                      ;*
     102.  00:8315                      ;* Devuelve: HL = A + HL
     103.  00:8315                      ;*
     104.  00:8315                      ;* Modifica: Nada
     105.  00:8315                      ;*
     106.  00:8315                      ;*********************************************************************************************************
     107.  00:8315                      ADD_A_HL:
     108.  00:8315  85                      add a,l
     109.  00:8316  6F                      ld l,a
     110.  00:8317  D0                      ret nc
     111.  00:8318  24                      inc h
     112.  00:8319  C9                      ret
     113.  00:831A                      
     114.  00:831A                      
     115.  00:831A                      ;*********************************************************************************************************
     116.  00:831A                      ;*
     117.  00:831A                      ;* Borra la pantalla
     118.  00:831A                      ;*
     119.  00:831A                      ;* Parámetros: Ninguno
     120.  00:831A                      ;*
     121.  00:831A                      ;* Devuelve: Nada
     122.  00:831A                      ;*
     123.  00:831A                      ;* Modifica: HL, BC, A
     124.  00:831A                      ;*
     125.  00:831A                      ;*********************************************************************************************************
     126.  00:831A                      clearScreen:
     127.  00:831A  21 00 78                ld hl,7800h	        ;tabla	de nombres (#3800) VRAM	= 16K #0000-#3FFF
     128.  00:831D  01 00 03                ld bc,300h	        ;name table size
     129.  00:8320  AF                      xor	a
     130.  00:8321                          ;sigue abajo en setFillVRAM
     131.  00:8321                      
     132.  00:8321                      
     133.  00:8321                      ;*********************************************************************************************************
     134.  00:8321                      ;*
     135.  00:8321                      ;* Escribe en una zona de la VRAM el valor de A
     136.  00:8321                      ;*
     137.  00:8321                      ;* Parámetros: HL = dirección VRAM, A = dato a escribir, BC = número de bytes
     138.  00:8321                      ;*
     139.  00:8321                      ;* Devuelve: Nada
     140.  00:8321                      ;*
     141.  00:8321                      ;* Modifica: A', C'
     142.  00:8321                      ;*
     143.  00:8321                      ;*********************************************************************************************************
     144.  00:8321                      setFillVRAM:
     145.  00:8321  CD 32 83                call setVDPWrite
     146.  00:8324                      fillVRAM:
     147.  00:8324  08                      ex af,af'
     148.  00:8325                      VRAM_write2:                        ;envío de las órdenes al VDP
     149.  00:8325  08                      ex af,af'
     150.  00:8326  D9                      exx
     151.  00:8327  ED 79                   out (c),a
     152.  00:8329  D9                      exx
     153.  00:832A  08                      ex af,af'
     154.  00:832B  0B                      dec bc
     155.  00:832C  78                      ld a,b
     156.  00:832D  B1                      or c
     157.  00:832E  20 F5                   jr nz,VRAM_write2
     158.  00:8330  08                      ex af,af'
     159.  00:8331  C9                      ret
     160.  00:8332                      
     161.  00:8332                      
     162.  00:8332                      ;*********************************************************************************************************
     163.  00:8332                      ;*
     164.  00:8332                      ;* Prepara el VDP para escribir en VRAM
     165.  00:8332                      ;*
     166.  00:8332                      ;* Parámetros: HL = dirección VRAM en la que queremos escribir
     167.  00:8332                      ;*
     168.  00:8332                      ;* Devuelve: C' = Puerto de escritura del VDP
     169.  00:8332                      ;*
     170.  00:8332                      ;* Modifica: A'
     171.  00:8332                      ;*
     172.  00:8332                      ;*********************************************************************************************************
     173.  00:8332                      setVDPWrite:
     174.  00:8332  08                      ex af,af'
     175.  00:8333  CD 53 00                call SETWRT
     176.  00:8336  D9                      exx
     177.  00:8337  3A 06 00                ld a,(byte_6)
     178.  00:833A  4F                      ld c,a
     179.  00:833B  D9                      exx
     180.  00:833C  08                      ex af,af'
     181.  00:833D  C9                      ret
     182.  00:833E                      
     183.  00:833E                      
     184.  00:833E                      apaga_pantalla:
     185.  00:833E  06 22                   ld b,022h
     186.  00:8340  0E 01                   ld c,1
     187.  00:8342  CD 47 00                call WRTVDP
     188.  00:8345  C9                      ret
     189.  00:8346                      
     190.  00:8346                      
     191.  00:8346                      enciende_pantalla:
     192.  00:8346  06 E2                   ld b,0E2h
     193.  00:8348  0E 01                   ld c,1
     194.  00:834A  CD 47 00                call WRTVDP
     195.  00:834D  C9                      ret
     196.  00:834E                      
     197.  00:834E                      
     198.  00:834E                      ;*********************************************************************************************************
     199.  00:834E                      ;*
     200.  00:834E                      ;* Configura el VDP
     201.  00:834E                      ;* - Screen 2
     202.  00:834E                      ;* - Sprites 16x16 unzoomed
     203.  00:834E                      ;* - Pattern name table = #3800-#3AFF
     204.  00:834E                      ;* - Pattern color table = #0000-#17FF
     205.  00:834E                      ;* - Pattern generator table = #2000-#37FF
     206.  00:834E                      ;* - Sprite atribute table	= #3b00-#3B7F
     207.  00:834E                      ;* - Sprite generator table = #1800-#1FFF
     208.  00:834E                      ;* - Background color = #E0 (Gris/Transparente)
     209.  00:834E                      ;*
     210.  00:834E                      ;* Parámetros: Ninguno
     211.  00:834E                      ;*
     212.  00:834E                      ;* Devuelve: Nada
     213.  00:834E                      ;*
     214.  00:834E                      ;* Modifica: AF, HL, BC, D
     215.  00:834E                      ;*
     216.  00:834E                      ;*********************************************************************************************************
     217.  00:834E                      SetVideoMode:
     218.  00:834E  21 5F 83                ld hl,VDP_InitData
     219.  00:8351  16 08                   ld d,8
     220.  00:8353  0E 00                   ld c,0
     221.  00:8355                      setVideoMode2:
     222.  00:8355  46                      ld b,(hl)
     223.  00:8356  CD 47 00                call WRTVDP
     224.  00:8359  23                      inc hl
     225.  00:835A  0C                      inc c
     226.  00:835B  15                      dec d
     227.  00:835C  20 F7                   jr nz,setVideoMode2
     228.  00:835E  C9                      ret
     229.  00:835F                      VDP_InitData:	
     230.  00:835F  02                      db 2
     231.  00:8360  E2                      db 0E2h
     232.  00:8361  0E                      db 0Eh
     233.  00:8362  7F                      db 7Fh
     234.  00:8363  07                      db 7
     235.  00:8364  76                      db 76h
     236.  00:8365  03                      db 3
     237.  00:8366  E0                      db 0E0h
     238.  00:8367                      
     239.  00:8367                      
     240.  00:8367                      doCortinilla:
     241.  00:8367  3E 20               	ld a,32
     242.  00:8369  32 1D 88                ld (waitCounter),a
     243.  00:836C  3E 01                   ld a,1
     244.  00:836E  32 20 88                ld (enCortinilla),a
     245.  00:8371                          ;sigue abajo en drawCortinilla
     246.  00:8371                          ;call drawCortinilla
     247.  00:8371                          ;ret
     248.  00:8371                      
     249.  00:8371                      
     250.  00:8371                      ;*********************************************************************************************************
     251.  00:8371                      ;*
     252.  00:8371                      ;* Borra la pantalla haciendo una cortinilla de izquierda a derecha, cada invocación una columna
     253.  00:8371                      ;*
     254.  00:8371                      ;* Parámetros: waitCounter = 32 - columna a borrar
     255.  00:8371                      ;*
     256.  00:8371                      ;* Devuelve: Nada
     257.  00:8371                      ;*
     258.  00:8371                      ;* Modifica: DE, HL, AF, B
     259.  00:8371                      ;*
     260.  00:8371                      ;*********************************************************************************************************
     261.  00:8371                      drawCortinilla:
     262.  00:8371  21 1D 88                ld hl,waitCounter
     263.  00:8374  35                      dec (hl)
     264.  00:8375                          ;estamos construyendo la serie #3800 hasta #381F
     265.  00:8375                          ;que son las posiciones de la primera fila de pantalla
     266.  00:8375                          ;en la tabla de nombres
     267.  00:8375  7E                      ld a,(hl)
     268.  00:8376  26 38                   ld h,38h		                ;#3800 es la tabla de nombres
     269.  00:8378  EE 1F                   xor	1Fh                         ;segundo nible de la tabla de nombres es 31-waitCounter
     270.  00:837A  6F                      ld l,a
     271.  00:837B                      
     272.  00:837B  06 18                   ld b,18h		                ;las 24 filas de la pantalla
     273.  00:837D  AF                      xor	a                           ;valor 0 a escribir en VRAM, borra la pantalla
     274.  00:837E                      
     275.  00:837E                      drawCortinilla2:                    ;borra una columna
     276.  00:837E  CD 4D 00                call WRTVRM
     277.  00:8381  11 20 00                ld de,20h                       ;las 32 columnas de la pantalla
     278.  00:8384  19                      add	hl,de		                ;siguiente fila
     279.  00:8385  10 F7                   djnz drawCortinilla2
     280.  00:8387                      
     281.  00:8387  3A 1D 88                ld a,(waitCounter)
     282.  00:838A  B7                      or a
     283.  00:838B  28 01                   jr z,.finCortinilla
     284.  00:838D                      
     285.  00:838D                      .salimos
     286.  00:838D  C9                      ret
     287.  00:838E                      .finCortinilla
     288.  00:838E  AF                      xor a
     289.  00:838F  32 20 88                ld (enCortinilla),a
     290.  00:8392  CD E5 82                call pinta_pantalla
     291.  00:8395  C9                      ret
      87   00:8396                      
      88   00:8396                      pantallas:
      89   00:8396  AA 83                   dw p1
      90   00:8398  16 84                   dw p2
      91   00:839A  8E 84                   dw p3
      92   00:839C  DD 84                   dw p4
      93   00:839E  FE 84                   dw p5
      94   00:83A0  1F 85                   dw p6
      95   00:83A2  40 85                   dw p7
      96   00:83A4  61 85                   dw p8
      97   00:83A6  B4 85                   dw p9
      98   00:83A8  D5 85                   dw p10
      99   00:83AA                      
     100   00:83AA                      p1:
     101   00:83AA  (006C)                  incbin "gfx/prueba.bin.asm_0_0.plet5"
     102   00:8416                      p2:
     103   00:8416  (0078)                  incbin "gfx/prueba.bin.asm_1_0.plet5"
     104   00:848E                      p3:
     105   00:848E  (004F)                  incbin "gfx/prueba.bin.asm_2_0.plet5"
     106   00:84DD                      p4:
     107   00:84DD  (0021)                  incbin "gfx/prueba.bin.asm_3_0.plet5"
     108   00:84FE                      p5:
     109   00:84FE  (0021)                  incbin "gfx/prueba.bin.asm_4_0.plet5"
     110   00:851F                      p6:
     111   00:851F  (0021)                  incbin "gfx/prueba.bin.asm_0_1.plet5"
     112   00:8540                      p7:
     113   00:8540  (0021)                  incbin "gfx/prueba.bin.asm_1_1.plet5"
     114   00:8561                      p8:
     115   00:8561  (0053)                  incbin "gfx/prueba.bin.asm_2_1.plet5"
     116   00:85B4                      p9:
     117   00:85B4  (0021)                  incbin "gfx/prueba.bin.asm_3_1.plet5"
     118   00:85D5                      p10:
     119   00:85D5  (0021)                  incbin "gfx/prueba.bin.asm_4_1.plet5"
     120   00:85F6                      
     121   00:85F6                      depack_VRAM:	
     122   00:85F6                          include "lib/PL_VRAM_Depack_SJASM.asm"
       1.  00:85F6                      ;-----------------------------------------------------------
       2.  00:85F6                      ; Pletter v0.5b VRAM Depacker v1.1 - 16Kb version
       3.  00:85F6                      ; HL = RAM/ROM source ; DE = VRAM destination
       4.  00:85F6                      ;-----------------------------------------------------------
       5.  00:85F6  F3                  	di
       6.  00:85F7                      
       7.  00:85F7                      ; VRAM address setup
       8.  00:85F7  7B                  	ld	a,e
       9.  00:85F8  D3 99               	out	[099h],a
      10.  00:85FA  7A                  	ld	a,d
      11.  00:85FB  F6 40               	or	040h
      12.  00:85FD  D3 99               	out	[099h],a
      13.  00:85FF                      
      14.  00:85FF                      ; Initialization
      15.  00:85FF  7E                  	ld	a,[hl]
      16.  00:8600  23                  	inc	hl
      17.  00:8601  D9                  	exx
      18.  00:8602  11 00 00            	ld	de,0
      19.  00:8605  87                  	add	a,a
      20.  00:8606  3C                  	inc	a
      21.  00:8607  CB 13               	rl	e
      22.  00:8609  87                  	add	a,a
      23.  00:860A  CB 13               	rl	e
      24.  00:860C  87                  	add	a,a
      25.  00:860D  CB 13               	rl	e
      26.  00:860F  CB 13               	rl	e
      27.  00:8611  21 C8 86            	ld	hl,modes
      28.  00:8614  19                  	add	hl,de
      29.  00:8615  5E                  	ld	e,[hl]
      30.  00:8616  DD 6B               	ld	ixl,e
      31.  00:8618  23                  	inc	hl
      32.  00:8619  5E                  	ld	e,[hl]
      33.  00:861A  DD 63               	ld	ixh,e
      34.  00:861C  1E 01               	ld	e,1
      35.  00:861E  D9                  	exx
      36.  00:861F  FD 21 28 86         	ld	iy,loop
      37.  00:8623                      
      38.  00:8623                      ; Main depack loop
      39.  00:8623  0E 98               literal:ld	c,098h
      40.  00:8625  ED A3               	outi
      41.  00:8627  13                  	inc	de
      42.  00:8628  87                  loop:	add	a,a
      43.  00:8629  CC BC 86              	call	z,getbit
      44.  00:862C  30 F5               	jr	nc,literal
      45.  00:862E                      
      46.  00:862E                      ; Compressed data
      47.  00:862E  D9                  	exx
      48.  00:862F  62                  	ld	h,d
      49.  00:8630  6B                  	ld	l,e
      50.  00:8631  87                  getlen: add	a,a
      51.  00:8632  CC C0 86            	call	z,getbitexx
      52.  00:8635  30 1D               	jr	nc,lenok
      53.  00:8637  87                  lus:	add	a,a
      54.  00:8638  CC C0 86            	call	z,getbitexx
      55.  00:863B  ED 6A               	adc	hl,hl
      56.  00:863D  D8                  	ret	c
      57.  00:863E  87                  	add	a,a
      58.  00:863F  CC C0 86            	call	z,getbitexx
      59.  00:8642  30 10               	jr	nc,lenok
      60.  00:8644  87                  	add	a,a
      61.  00:8645  CC C0 86            	call	z,getbitexx
      62.  00:8648  ED 6A               	adc	hl,hl
      63.  00:864A  DA C6 86            	jp	c,Depack_out
      64.  00:864D  87                  	add	a,a
      65.  00:864E  CC C0 86            	call	z,getbitexx
      66.  00:8651  DA 37 86            	jp	c,lus
      67.  00:8654  23                  lenok:  inc	hl
      68.  00:8655  D9                  	exx
      69.  00:8656  4E                  	ld	c,[hl]
      70.  00:8657  23                  	inc	hl
      71.  00:8658  06 00               	ld	b,0
      72.  00:865A  CB 79               	bit	7,c
      73.  00:865C  CA 8F 86            	jp	z,offsok
      74.  00:865F  DD E9               	jp	ix
      75.  00:8661                      
      76.  00:8661  87                  mode7:  add	a,a
      77.  00:8662  CC BC 86              	call	z,getbit
      78.  00:8665  CB 10               	rl	b
      79.  00:8667  87                  mode6:	add	a,a
      80.  00:8668  CC BC 86              	call	z,getbit
      81.  00:866B  CB 10               	rl	b
      82.  00:866D  87                  mode5:  add	a,a
      83.  00:866E  CC BC 86              	call	z,getbit
      84.  00:8671  CB 10               	rl	b
      85.  00:8673  87                  mode4:  add	a,a
      86.  00:8674  CC BC 86              	call	z,getbit
      87.  00:8677  CB 10               	rl	b
      88.  00:8679  87                  mode3:  add	a,a
      89.  00:867A  CC BC 86              	call	z,getbit
      90.  00:867D  CB 10               	rl	b
      91.  00:867F  87                  mode2:	add	a,a
      92.  00:8680  CC BC 86              	call	z,getbit
      93.  00:8683  CB 10               	rl	b
      94.  00:8685  87                  	add	a,a
      95.  00:8686  CC BC 86              	call	z,getbit
      96.  00:8689  30 04               	jr	nc,offsok
      97.  00:868B  B7                  	or	a
      98.  00:868C  04                  	inc	b
      99.  00:868D  CB B9               	res	7,c
     100.  00:868F  03                  offsok: inc	bc
     101.  00:8690  E5                  	push	hl
     102.  00:8691  D9                  	exx
     103.  00:8692  E5                  	push	hl
     104.  00:8693  D9                  	exx
     105.  00:8694  6B                  	ld	l,e
     106.  00:8695  62                  	ld	h,d
     107.  00:8696  ED 42               	sbc	hl,bc
     108.  00:8698  C1                  	pop	bc
     109.  00:8699  F5                  	push	af
     110.  00:869A  7D                  .loop:	ld	a,l
     111.  00:869B  D3 99               	out	[099h],a
     112.  00:869D  7C                  	ld	a,h
     113.  00:869E  00                  	nop                     ; VDP timing
     114.  00:869F  D3 99               	out	[099h],a
     115.  00:86A1  00                  	nop                     ; VDP timing
     116.  00:86A2  DB 98               	in	a,[098h]
     117.  00:86A4  08                  	ex	af,af'
     118.  00:86A5  7B                  	ld	a,e
     119.  00:86A6  00                  	nop			; VDP timing
     120.  00:86A7  D3 99               	out	[099h],a
     121.  00:86A9  7A                  	ld	a,d
     122.  00:86AA  F6 40               	or	040h
     123.  00:86AC  D3 99               	out	[099h],a
     124.  00:86AE  08                  	ex	af,af'
     125.  00:86AF  00                  	nop			; VDP timing
     126.  00:86B0  D3 98               	out	[098h],a
     127.  00:86B2  13                  	inc	de
     128.  00:86B3  ED A1               	cpi
     129.  00:86B5  EA 9A 86            	jp	pe,.loop
     130.  00:86B8  F1                  	pop	af
     131.  00:86B9  E1                  	pop	hl
     132.  00:86BA  FD E9               	jp	iy
     133.  00:86BC                      
     134.  00:86BC  7E                  getbit: ld	a,[hl]
     135.  00:86BD  23                  	inc	hl
     136.  00:86BE  17                  	rla
     137.  00:86BF  C9                  	ret
     138.  00:86C0                      
     139.  00:86C0                      getbitexx:
     140.  00:86C0  D9                  	exx
     141.  00:86C1  7E                  	ld	a,[hl]
     142.  00:86C2  23                  	inc	hl
     143.  00:86C3  D9                  	exx
     144.  00:86C4  17                  	rla
     145.  00:86C5  C9                  	ret
     146.  00:86C6                      
     147.  00:86C6                      ; Depacker exit
     148.  00:86C6                      Depack_out:
     149.  00:86C6  FB                  	ei
     150.  00:86C7  C9                  	ret
     151.  00:86C8                      
     152.  00:86C8                      modes:
     153.  00:86C8  8F 86               	dw	offsok
     154.  00:86CA  7F 86               	dw	mode2
     155.  00:86CC  79 86               	dw	mode3
     156.  00:86CE  73 86               	dw	mode4
     157.  00:86D0  6D 86               	dw	mode5
     158.  00:86D2  67 86               	dw	mode6
     159.  00:86D4  61 86               	dw	mode7
     123   00:86D6                      
     124   00:86D6                      tabla_colores:
     125   00:86D6  (007F)              	incbin	"gfx/prueba.bin.clr.plet5"
     126   00:8755                      tabla_tiles:
     127   00:8755  (00C6)              	incbin	"gfx/prueba.bin.chr.plet5"
     128   00:881B                      
     129   00:881B                          include "variables.asm"
       1.  00:881B                      ;*************************
       2.  00:881B                      ; DEFINICION DE VARIABLES
       3.  00:881B                      ;*************************
       4.  00:881B                      
       5.  00:881B  00                  x_mapa:				db 0		;coordenada x
       6.  00:881C  00                  y_mapa:				db 0		;coordenada y
       7.  00:881D  00                  waitCounter:        db 0        ;contador de espera
       8.  00:881E  00                  tickInProgress:     db 0        ;indica si estamos corriendo la ISR
       9.  00:881F  00                  timer:              db 0        ;contador global del programa
      10.  00:8820  00                  enCortinilla:       db 0        ;indica si estamos en medio de una cortinilla
     130   00:8821                      
     131   00:8821                      ;******************
     132   00:8821                      ; FIN DEL PROGRAMA
     133   00:8821                      ;******************
     134   00:8821                      
     135   00:8821                      END:

    LABELS
-------------------------------------------------
00:000000D5   GTSTCK
00:0000013E   RDVDP
00:00000047   WRTVDP
00:00000053   SETWRT
00:0000004D   WRTVRM
00:0000FD9F   HTIMI
00:00000005   ANCHO_MAPA
00:00000002   ALTO_MAPA
00:00000006   byte_6
00:00008200   BEGIN
00:0000825E X bucle_infinito
00:00008260   tickMain
00:00008282   tickMain.seguimos
00:0000829A   tickMain.terminamos
00:0000829E   tickMain2
00:000082A3   do_arriba
00:000082B1   do_arriba.end
00:000082B3   do_abajo
00:000082C2   do_abajo.end
00:000082C4   do_derecha
00:000082D3   do_derecha.end
00:000082D5   do_izquierda
00:000082E3   do_izquierda.end
00:000082E5   pinta_pantalla
00:000082FD   calcula_puntero
00:0000830D   getIndexHL_A
00:00008315   ADD_A_HL
00:0000831A X clearScreen
00:00008321 X setFillVRAM
00:00008324 X fillVRAM
00:00008325   VRAM_write2
00:00008332   setVDPWrite
00:0000833E   apaga_pantalla
00:00008346   enciende_pantalla
00:0000834E   SetVideoMode
00:00008355   setVideoMode2
00:0000835F   VDP_InitData
00:00008367   doCortinilla
00:00008371   drawCortinilla
00:0000837E   drawCortinilla2
00:0000838D X drawCortinilla2.salimos
00:0000838E   drawCortinilla2.finCortinilla
00:00008396   pantallas
00:000083AA   p1
00:00008416   p2
00:0000848E   p3
00:000084DD   p4
00:000084FE   p5
00:0000851F   p6
00:00008540   p7
00:00008561   p8
00:000085B4   p9
00:000085D5   p10
00:000085F6   depack_VRAM
00:00008623   literal
00:00008628   loop
00:00008631 X getlen
00:00008637   lus
00:00008654   lenok
00:00008661   mode7
00:00008667   mode6
00:0000866D   mode5
00:00008673   mode4
00:00008679   mode3
00:0000867F   mode2
00:0000868F   offsok
00:0000869A   offsok.loop
00:000086BC   getbit
00:000086C0   getbitexx
00:000086C6   Depack_out
00:000086C8   modes
00:000086D6   tabla_colores
00:00008755   tabla_tiles
00:0000881B   x_mapa
00:0000881C   y_mapa
00:0000881D   waitCounter
00:0000881E   tickInProgress
00:0000881F   timer
00:00008820   enCortinilla
00:00008821   END


 Output: out/main
-------------------------------------------------

 Page: 00
  Org: 00008200  Size: *  Used: 00000000

    No output

 Output: out/main.bin
-------------------------------------------------

 Page: 00
  Org: 00008200  Size: *  Used: 00000628

   Address   Length Align   Label
   00008200    1576         BEGIN
